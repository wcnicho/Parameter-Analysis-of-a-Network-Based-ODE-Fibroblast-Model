function ValidationSimulations_paramsweep(tension,dose,ODEfun,loadParam,name,inputNames) 
% Generated by Netflux 0.08a on 15-Oct-2019
% Edited 15-Oct-2019 JR: Deleted 3 edges, set NFAT=>MRTF to 0 weight
% Edited 24-May-2022 WN: Add disaggregated function handle input
% Edited 06-June-2022 WN: Fix node indexing, parallelize
% Suggested inputs: dose=0.6

addpath(pwd);
cd('/scratch1/wcnicho'); 

% get species and reaction parameters 
[params,y0] = loadParam();
[rpar,tau,ymax,speciesNames] = params{:};
w = rpar(1,:);
n = rpar(2,:);
EC50 = rpar(3,:);

% set tension
i_tens = strcmp(speciesNames,'tensionin');
w(i_tens) = tension;

% additional parameters: inputNames, parameter sweep values
%inputNames = {'AngIIin','TGFBin','IL6in','IL1in','TNFain','NEin','PDGFin','ET1in','NPin','E2in'};
n_sweep = 1.05:0.05:2;
EC50_sweep = 0.4:0.05:0.6;

% create storage arrays
act_b = zeros(1, length(speciesNames), length(n_sweep), length(EC50_sweep));
act_s = zeros(length(inputNames), length(speciesNames), length(n_sweep), length(EC50_sweep));
act_delta = zeros(length(inputNames), length(speciesNames), length(n_sweep), length(EC50_sweep));
predictions = zeros(length(inputNames),length(speciesNames), length(n_sweep), length(EC50_sweep));
threshold = 0.05;

L_EC50 = length(EC50_sweep);
L_names = length(inputNames);

parfor n_i = 1:length(n_sweep)
    for EC50_i = 1:L_EC50
        % set parameter sweep values
        fprintf("n = %.2f | EC50 = %.2f\n",n_sweep(n_i),EC50_sweep(EC50_i))
        n_idx = [1:11,23:139,141:198];
        n_sim = n;
        n_sim(n_idx) = n_sweep(n_i);
        EC50_sim = EC50;
        EC50_sim(n_idx) = EC50_sweep(EC50_i);
        
        % run baseline simulation
        rpar = [w;n_sim;EC50_sim];
        params = {rpar,tau,ymax,speciesNames};
        tspan = [0 40];
        options = [];
        [~,y1] = ode23(ODEfun,tspan,y0,options,params);
        act_b(:,:,n_i,EC50_i) = real(y1(end,:));
        
        % run simulation with input stimulus (w=0.6)
        sa = zeros(L_names,length(speciesNames));
        for node = 1:L_names
            w_stim = w;                             % reset from previous loop
            node_idx = strcmp(inputNames(node),speciesNames);
            w_stim(node_idx) = dose;
            rpar = [w_stim;n_sim;EC50_sim];
            params = {rpar,tau,ymax,speciesNames};  % integrate into params
            tspan = [40 80];
            [~,y2] = ode23(ODEfun,tspan,y1(end,:),options,params);
            sa(node,:) = real(y2(end,:));
        end
        act_s(:,:,n_i,EC50_i) =sa;
        % calculate delta(Activity): abs(act_ko - act_b)
        act_delta(:,:,n_i,EC50_i) = (act_s(:,:,n_i,EC50_i) - act_b(:,:,n_i,EC50_i));
    end
end

% infer qualitative trends based on threshold
predictions(act_delta<(-1*threshold)) = -1;   % flag decreases
predictions(act_delta>1*threshold) = 1;     % flag increases

% save results
tension = replace(string(tension),'.','_');
dose = replace(string(dose),'.','_');
%save(append(name,'/',name,'_LT_paramsweep_act_delta.mat'), 'act_delta');
save(append(name,'/',tension,'/',dose,'_paramsweep_predictions.mat'), 'predictions');
save(append(name,'/',tension,'/',dose,'_paramsweep_inputs.mat'),'inputNames');
save(append(name,'/',tension,'/',dose,'_paramsweep_speciesNames.mat'),'speciesNames');
